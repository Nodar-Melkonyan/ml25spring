import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#ფაილის ფორმატირება
import re

log_file = "nodar_melkonyan_1_server.log"
with open(log_file, "r", encoding="utf-8", errors="ignore") as file:
    log_lines = file.readlines()

log_lines[:5]

log_pattern = re.compile(r'(?P<ip>\d+\.\d+\.\d+\.\d+) - - \[(?P<timestamp>.*?)\]')

ip_list = []
timestamp_list = []

for line in log_lines:
    match = log_pattern.search(line)
    if match:
        ip_list.append(match.group("ip"))
        timestamp_list.append(match.group("timestamp"))

#მონაცემთა ჩარჩოს შექმნა
log_df = pd.DataFrame({"IP": ip_list, "Timestamp": timestamp_list})
log_df["Timestamp"] = pd.to_datetime(log_df["Timestamp"].str[:-6], format="%Y-%m-%d %H:%M:%S")
log_df.head()
log_df.info()

#numpy-ის გამოყენება x და y მნიშვნელობების ამოსაღება შემდეგი დამუშავებისთვის
X = traffic_df['PPS'].values
Y = traffic_df['USIP'].values

#რეგრესიის კოეფიციენტები
slope, intercept = np.polyfit(X, Y, deg=1)

#სავარაუდო მონაცემების გამოთვლა და ჩარჩოში დამატება
traffic_df['Predicted USIP'] = slope * X + intercept
traffic_df['Residual'] = Y - traffic_df['Predicted USIP']
traffic_df['Absolute Residual'] = traffic_df['Residual'].abs()
traffic_df.head()

#გავარდნილი მონაცემების შემოწმება
outlier_rows = traffic_df.sort_values(by='Residual', ascending=False).head(3)

print(">>> Top 3 Potential DDoS Attack Windows Detected:\n")
for i, row in outlier_rows.iterrows():
    print(f"Outlier #{i+1}")
    print(row[['Timestamp', 'PPS', 'USIP', 'Predicted USIP', 'Residual']])
    print("-" * 50)

#ვიზუალიზაცია
top_outliers = traffic_df.sort_values(by='Residual', ascending=False).head(3)
plt.figure(figsize=(10, 6))

plt.scatter(traffic_df['PPS'], traffic_df['USIP'], label='Observed Traffic', alpha=0.6)

plt.plot(traffic_df['PPS'], traffic_df['Predicted_USIP'], color='red', label='Regression Line')

colors = ['orange', 'purple', 'green']
labels = ['Top Outlier (1)', 'Top Outlier (2)', 'Top Outlier (3)']

for i, (idx, row) in enumerate(top_outliers.iterrows()):
    plt.scatter(row['PPS'], row['USIP'],
                color=colors[i], edgecolor='black', s=50, label=labels[i])

plt.xlabel('Packets Per Second (PPS)')
plt.ylabel('Unique Source IPs (USIP)')
plt.title('DDoS Detection: Highlighting Top 3 Outliers')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
